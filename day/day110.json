{
    "year" : 2017,
<<<<<<< HEAD
    "month" : 3,
    "day" : 13,
    "hour" : 23,
    "min" : 55,
    "title" : "앵귤러 리엑트",
    "content" : "상용화된 프레임워크 들의 양대산맥으로 불리는 앵귤러 리엑트 사실 요즘 나오는 프레임워크들은 철학적으로나 사상적으로 비슷하여 어느 프레임워크를 쓰던 비슷한 느낌이 드는 기분이다. 앵귤러는 일단 개발 프로세스 아키텍쳐 설계 부분에 중점을 두는 반면에 리엑트같은 경우에는 데이터가 바인딩되기까지의 그 과정이 매우 빠르고 퍼포먼스 적인 부분에서 매우 후률ㅇ한 프레임워크라 말할 수 있는거 같다. 두가지 각 장점들이 있고 자신에게 더 맞는 프레임워크를 쓰는 것도 나쁘진 않다고 본다.",
    "til" :[],
    "nice" : "리엑트",
    "bad" : "없음",
    "imp" : "리엑트 좀 더 세부적으로 서베이."
=======
    "month" : 2,
    "day" : 24,
    "hour" : 	22,
    "min" : 35,
    "title" : "디자인 패턴에 대한 중요성",
    "content" : "모든 코드는 오랜시간 아니 일주일이란 시간이 지나도 가독을 하려면 어느정도의 시간이 지체되고 또한 다른 사람의 코드를 이해하기 위해서는 그 시간의 두배 3배에 달하는 시간을 쏟아야한다. 따라서 모든 사람들이 이해하고 공동적으로 사용할 수 있는 디자인패턴이란 것은 매우 중요하다. 몇가지의 패턴을 이전붙터 흐름을 익혀뒀지만 그래도 제대로 디자인 패턴에 대해서 시간을 쏟으며 몰입해본적은 없다. 코딩 패턴에 대해서는 내가 그동안 삽질을 하면서 느껴왔던 것들과 어느정도 일치되는 부분도 있었고 새롭게 느낀 부분들도 많았는데 이에 대해서 제대로 공부해볼 생각이다. 안티패턴을 주의하잔 생각을 많이 가지게 되었다. 디자인 패턴이란건 안배울수가 없다. 엄청나게 많은 고민을 하고 논리가 뛰어난 사람들이 이러이러한 아키텍쳐로 설계된다면 좋을 것이다. 또는 많은 개발자들이 공동적으로 이러이러한 패턴을 자주쓴다라는 집합들을 모아서 정리를 한 것이기 때문에 디자인 패턴은 협업에 있어서나 혼자만의 개인프로젝트를 할지라도 개발 시간을 줄이고 삽질을 줄이는데 있어서 매우 큰 작용을 한다고 나는 생각한다. 항상 전부터 많은 사람들의 코드를 보는 것을 중요하게 생각했고 이에 대한 공동 집합체는 디자인패턴이라 생각이 든다.",
    "til" :[],
    "nice" : "디자인패턴의 중요성을 내 가슴으로 느끼다.",
    "bad" : "없음",
    "imp" : "주말에 디자인패턴에 대한 공부를 해보자."
>>>>>>> e861589c62c441c4c696984ced6fdafdbc4a63db
}